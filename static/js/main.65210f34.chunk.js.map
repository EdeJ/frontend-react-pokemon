{"version":3,"sources":["components/Pokemon.js","App.js","reportWebVitals.js","index.js"],"names":["Pokemon","name","useState","pokemonDetails","setPokemonDetails","useEffect","a","Axios","get","result","console","log","data","error","fetchData","App","pokimonList","setPokimonList","offset","setOffset","pokimonName","setPokimonName","count","fetchPokimonList","type","onClick","results","map","pokimon","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6PAGaA,G,MAAU,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAAW,EAEWC,mBAAS,MAFpB,mBAE1BC,EAF0B,KAEVC,EAFU,KAuBjC,OAnBAC,qBAAU,WAAM,4CAEZ,4BAAAC,EAAA,+EAE6BC,IAAMC,IAAN,4CAA+CP,IAF5E,OAEcQ,EAFd,OAGQC,QAAQC,IAAIF,EAAOG,MACnBR,EAAkBK,EAAOG,MAJjC,gDAMQF,QAAQG,MAAR,MANR,0DAFY,sBAeZ,OAfa,WAAD,wBAYZC,GAGO,eAER,IAGC,8BACI,0CAAaX,GAAkBA,EAAeF,YCuC3Cc,MA9Df,WAAgB,IAAD,EAEyBb,mBAAS,MAFlC,mBAENc,EAFM,KAEOC,EAFP,OAGef,mBAAS,GAHxB,mBAGNgB,EAHM,KAGEC,EAHF,OAIyBjB,mBAAS,IAJlC,mBAINkB,EAJM,KAIOC,EAJP,KAyBb,OAlBAhB,qBAAU,WAAM,4CACd,4BAAAC,EAAA,+EAEyBC,IAAMC,IAAN,4DAA+DU,IAFxF,OAEUT,EAFV,OAGIC,QAAQC,IAAIF,EAAOG,MACnBF,QAAQC,IAAIF,EAAOG,KAAKU,OACxBL,EAAeR,EAAOG,MAL1B,gDAOIF,QAAQG,MAAR,MAPJ,0DADc,sBAad,OAbe,WAAD,wBAWdU,GAEO,eAEN,CAACL,IAIF,gCACE,wBACEM,KAAK,SACLC,QAAS,WACHP,EAAS,IAAM,GACjBC,EAAUD,EAAS,KAJzB,oBAUA,wBACEM,KAAK,SACLC,QAAS,WACHP,EAAS,GAAKF,EAAYM,MAAQ,GACpCH,EAAUD,EAAS,KAJzB,sBAQA,6BACGF,EAAcA,EAAYU,QAAQC,KAAI,SAACC,GAAD,OACrC,oBAAuBH,QAAS,kBAAMJ,EAAeO,EAAQ3B,OAA7D,SAAqE2B,EAAQ3B,MAApE2B,EAAQ3B,SAEf,8CAGLmB,GACC,cAAC,EAAD,CAASnB,KAAMmB,QC9CRS,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.65210f34.chunk.js","sourcesContent":["import Axios from 'axios'\r\nimport React, { useEffect, useState } from 'react'\r\n\r\nexport const Pokemon = ({ name }) => {\r\n\r\n    const [pokemonDetails, setPokemonDetails] = useState(null);\r\n\r\n    useEffect(() => {\r\n\r\n        async function fetchData() {\r\n            try {\r\n                const result = await Axios.get(`https://pokeapi.co/api/v2/pokemon/${name}`);\r\n                console.log(result.data);\r\n                setPokemonDetails(result.data);\r\n            } catch (error) {\r\n                console.error(error);\r\n            }\r\n        }\r\n\r\n        fetchData();\r\n\r\n\r\n        return () => {\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <h1>Pokemon {pokemonDetails && pokemonDetails.name}</h1>\r\n        </div>\r\n    )\r\n}\r\n","import Axios from 'axios';\r\nimport React, { useEffect, useState } from 'react';\r\nimport './App.css';\r\nimport { Pokemon } from './components/Pokemon';\r\n\r\nfunction App() {\r\n\r\n  const [pokimonList, setPokimonList] = useState(null);\r\n  const [offset, setOffset] = useState(0);\r\n  const [pokimonName, setPokimonName] = useState('');\r\n  // const [limit, setLimit] = useState(20);\r\n\r\n  useEffect(() => {\r\n    async function fetchPokimonList() {\r\n      try {\r\n        const result = await Axios.get(`https://pokeapi.co/api/v2/pokemon?limit=20&offset=${offset}`);\r\n        console.log(result.data);\r\n        console.log(result.data.count);\r\n        setPokimonList(result.data);\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    }\r\n    fetchPokimonList();\r\n\r\n    return () => {\r\n    }\r\n  }, [offset])\r\n\r\n\r\n  return (\r\n    <div>\r\n      <button\r\n        type=\"button\"\r\n        onClick={() => {\r\n          if (offset - 20 > -1) {\r\n            setOffset(offset - 20);\r\n          }\r\n        }}\r\n      >\r\n        Vorige\r\n        </button>\r\n      <button\r\n        type=\"button\"\r\n        onClick={() => {\r\n          if (offset + 20 < pokimonList.count + 1)\r\n            setOffset(offset + 20);\r\n        }}\r\n      >Volgende\r\n        </button>\r\n      <ul>\r\n        {pokimonList ? pokimonList.results.map((pokimon) => (\r\n          <li key={pokimon.name} onClick={() => setPokimonName(pokimon.name)}>{pokimon.name}</li>\r\n        )) : (\r\n            <h1>loading...</h1>\r\n          )}\r\n      </ul>\r\n      {pokimonName && (\r\n        <Pokemon name={pokimonName}\r\n\r\n        />)\r\n      }\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}